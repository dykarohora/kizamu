---
description: 
globs: packages/libs/db/**/*.*
alwaysApply: false
---
# dbパッケージの実装ルール

## 前提とすべき設計ドキュメント

- [00_requirement_design.md](mdc:00_docs/00_requirement_design.md)
- [02_database_design.md](mdc:00_docs/02_database_design.md)

## DBスキーマの定義について

- drizzle-ormパッケージを使って定義する
- 原則としてカラムはNULLを許容しない
- 文字列は`text`型を使用する
- 時刻型を使用する場合はタイムゾーン設定は行わない
  - クライアントにてタイムゾーン処理を行うため

## コードについて

- Drizzle-ORMを使用する
- DBへのCRUDについては@effect/sql、@effect/sql-pg、@effect/sql-drizzleを使って実装する

### 基本的なSELECTクエリ

```typescript
import type { SqlError } from '@effect/sql'
import { PgDrizzle } from '@effect/sql-drizzle/Pg'
import { eq } from 'drizzle-orm'
import { Effect } from 'effect'
import { usersTable } from './user.sql'
import { NotFoundUserError } from './error'

// ユーザーIDによるユーザー検索
export const fetchUserById = (userId: string) =>
  Effect.gen(function* () {
    // データベース接続を取得
    const db = yield* PgDrizzle

    // クエリ実行
    const result = yield* db
      .select({ id: usersTable.id, name: usersTable.name, email: usersTable.email })
      .from(usersTable)
      .where(eq(usersTable.id, userId))
      .limit(1)

    // 結果が空の場合はエラーを返す
    if (result.length === 0) {
      return yield* Effect.fail(new NotFoundUserError({ userId }))
    }

    return result[0]
  })
```

### トランザクションの使い方

```typescript
import type { SqlClient, SqlError } from '@effect/sql'
import { SqlClient } from '@effect/sql'
import { PgDrizzle } from '@effect/sql-drizzle/Pg'
import { eq } from 'drizzle-orm'
import { Effect } from 'effect'
import { usersTable } from './user.sql'
import { NotFoundUserError } from './error'

// トランザクションを使用したユーザー更新
export const updateUser = (user) =>
  Effect.gen(function* () {
    // データベース接続を取得
    const db = yield* PgDrizzle
    const sql = yield* SqlClient.SqlClient

    // 更新データ
    const updateData = {
      email: user.email,
      name: user.name,
      updatedAt: new Date(),
    }

    // トランザクション内でクエリを実行
    yield* sql.withTransaction(
      Effect.gen(function* () {
        // 更新クエリ実行
        const result = yield* db
          .update(usersTable)
          .set(updateData)
          .where(eq(usersTable.id, user.id))
          .returning({ id: usersTable.id })

        // 更新された行がない場合はエラー
        if (result.length === 0) {
          // 結果がFailureであった場合はロールバックが行われる
          return yield* Effect.fail(new NotFoundUserError({ userId: user.id }))
        }
      })
    )

    return user
  })
```

### 重要なポイント

1. **基本的な流れ**:
   - `yield* PgDrizzle` でデータベース接続を取得
   - Drizzle ORMの構文でクエリを構築
   - `yield*` でクエリを実行
   - 結果を処理

2. **トランザクション**:
   - `yield* SqlClient.SqlClien`でトランザクション用のクライアントを取得する
   - `sql.withTransaction()` 内でEffectで表現したクエリ渡す
   - Effect成功時に自動コミット
   - Effect失敗時に自動ロールバック(`Effect.fail()` でエラーを返すとロールバックされる)
