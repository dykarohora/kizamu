---
description: 
globs: packages/libs/schema/**/*.*
alwaysApply: false
---
# schemaパッケージの実装ルール

## 使用ライブラリ

effectライブラリのスキーマモジュールを使い、システム全体で使用することとなるオブジェクトの型とバリデータを定義する。

実装する時には以下のコードを参考にバリデータと型を定義すること
```ts
import { Schema } from 'effect'

/**
 * ユーザーのスキーマ定義（バリデータ）
 */
export const UserSchema = Schema.Struct({
  id: Schema.NonEmptyString,
  name: Schema.NonEmptyString,
  email: Schema.NonEmptyString,
})

/**
 * ユーザーの型
 */
export type User = Schema.Schema.Type<typeof UserSchema>
```

## テスト方針

schemaパッケージのテストは、以下の目的と方針に従って実施する：

### テストの目的

1. **ビジネスルールの検証**：
   - スキーマが定義するビジネスルールが正しく実装されていることを確認する
   - 例：必須フィールド、文字列の長さ制限、特定の形式（メールアドレスなど）

2. **バリデーション動作の保証**：
   - 有効なデータが受け入れられ、無効なデータが拒否されることを確認する
   - エラーメッセージが適切であることを確認する

3. **将来の変更に対する保護**：
   - スキーマの変更が既存の期待動作を壊さないことを保証する

### テスト実装のガイドライン

1. **基本的なバリデーションテスト**：
   - 有効なデータが検証を通過することを確認
   - 無効なデータ（空文字列、不正な形式など）が適切に拒否されることを確認
   - 必須フィールドが欠けている場合のエラー処理を確認

2. **境界値テスト**：
   - 最小/最大長さの文字列
   - 日付や数値の最小/最大値
   - 特殊文字を含む入力

3. **カスタムバリデーションのテスト**：
   - Schema.NonEmptyStringなどの基本型を超えたカスタムバリデーションロジックがある場合は、その動作を詳細にテスト

4. **シリアライズ/デシリアライズのテスト**：
   - JSONからのパース
   - オブジェクトからJSONへの変換
   - データベースとの相互運用性（必要に応じて）

### テストの価値判断

以下の場合にはテストの価値が高い：

1. カスタムバリデーションロジックが存在する場合
2. 複雑なビジネスルールがスキーマに組み込まれている場合
3. スキーマが頻繁に変更される可能性がある場合

単純なスキーマ定義（基本的なSchema.NonEmptyStringのみを使用するなど）の場合は、テストの価値が限定的になる可能性があるため、テストの範囲と詳細さのバランスを考慮する。


## ドメインオブジェクトについて

エヴァンスのDomain Driven Developmentで提唱されている3つのタイプのオブジェクト

### エンティティ (Entity)

- 一意のIDで識別され、ライフサイクルを通じて同一性が保持される
- 属性が変更されても同一性は維持される
- 主な実装方法:
  - 現実世界の識別子 (社員番号、商品コード等)
  - システム生成の識別子 (UUID、自動採番、タイムスタンプベース)

### 値オブジェクト (Value Object)

- 属性値そのものが重要で、個別の同一性を持たない
- 同じプロパティ値を持つインスタンスは同一とみなされる
- 設計ポイント:
  - 値の表現に焦点
  - 複雑なビジネスロジックは含めない
  - バリデーションは作成時のみ
  - 等価性の比較を適切に実装
- 例: 電話番号、メールアドレス、住所、日付、商品コード

### 集約 (Aggregate)

- 関連オブジェクトのクラスターを一つの単位として扱う
- 集約ルート(エンティティ)を通じてのみアクセス可能
- 特徴:
  - 整合性の境界を定義
  - トランザクション境界を定義
  - 集約内変更は単一トランザクションで実行
- 設計ベストプラクティス:
  - ドメインを起点に設計
  - 集約は小さく保つ
  - 境界を明確にする
  - 集約間は結果整合性を許容

### 実装ガイドライン

- 集約ルートを通じて内部オブジェクトを操作する
- 集約内のすべての変更は単一トランザクションで行う
- ドメイン中心設計を優先しつつ、DB特性などの技術的制約とのバランスを考慮
- 集約間の依存関係は最小限に抑える
