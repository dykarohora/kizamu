---
description: 
globs: packages/apps/web-app/**/*.*
alwaysApply: false
---
# Webフロントエンドの実装ルール

## ディレクトリ構成

```
app/
├── root.tsx                # アプリケーションのルートレイアウト
├── routes.ts               # ルート定義
├── entry.client.tsx        # クライアントエントリーポイント
├── entry.server.tsx        # サーバーエントリーポイント
├── routes/                 # ルートコンポーネント
│   ├── Home.tsx            # ホームページ
│   ├── Dashboard.tsx       # ダッシュボードページ
│   └── layouts/            # レイアウトコンポーネント
│       └── MainLayout.tsx  # メインレイアウト（ヘッダーを含む）
├── shared/                 # 共通モジュール全般
│   ├── components/         # 共通コンポーネント
│   │   ├── ui/             # 基本UIコンポーネント（Park UI）
│   │   ├── layout/         # レイアウト関連コンポーネント（Header, Footer等）
│   │   └── features/       # 機能単位のコンポーネント
│   ├── hooks/              # 共通カスタムフック
│   └── utils/              # ユーティリティ関数
├── effect/                 # Effect システム基盤
├── services/               # ドメインサービス
│   ├── api/                # API関連サービス
│   └── auth/               # 認証関連サービス
└── providers/              # アプリケーション全体のプロバイダー
```

## 設計原則
- コンポーネントの責務を限定し、一つの関数の範囲を小さく保つ
	- 一つのコンポーネントが扱うhooksを5つ以内に制限する
	- ロジック、状態管理、表示などの責務ごとにコンポーネントを分割する
	- 「クソデカコンポーネント」を避け、機能的凝集を意識する
- 状態のスコープを最小限に保つ
	- グローバル状態の使用を避け、必要な範囲でのみ状態を共有する
	- Props drillingは見た目は美しくなくても、状態の依存関係が明確になるメリットがある
	- Contextは本当に必要な場合（Snackbarなどコンポーネント階層を超えて使用するUIなど）のみ使用する
- ロジックを適切に抽出し、テスト容易性を高める
	- 複雑なロジックは純粋なTypeScript関数として切り出す
	- DOMやReactに依存しないコードにして、テストを書きやすくする
	- Render hooksパターンを活用して状態をカプセル化する
- 無理な共通化を避け、コロケーションを重視する
	- コード重複を恐れずに、責務に応じた適切なレイヤー分けを行う
	- 関心が近いコードは近くに配置する（コロケーション）
	- UIの共通化はエンジニアリングではなく、デザインのレイヤーで適切に設計する
- コンポーネントの分割によるパフォーマンス向上を意識する
	- 状態変更の影響範囲を小さくすることで再レンダリングを最適化できる
	- 状態をMove DownやRift Upして適切な範囲に持つ
- Deep modulesの考え方を適用する
	- 外部インターフェース（Public API）はシンプルに保ちつつ、内部実装は分割する
	- ファイルは細かく分けすぎず、同じファイル内に関連する複数の関数やコンポーネントを定義する
  
## React Router v7 と Effect の統合
- React Router v7 のルーティング機能をそのまま活用
- Loader と Action を Effect システムと統合
- Effect の型安全性とエラーハンドリングを React Router v7 に適用

## スタイリング
- Panda CSSを使うこと
- コンポーネントのHTMLとスタイルは分割して記述するが、同一ファイル内にまとめること

### カラーパレット
- Park UIのSemantics Tokenを使うこと

## Reactコンポーネントを実装するときの規約
- 関数型コンポーネントとして実装すること
- アロー関数を使って実装すること

## 認証モジュールの使い方

### 3.3 主要なAPI

#### 3.3.1 認証状態の取得 - `getAuthStatus`

```typescript
/**
 * ユーザーの認証状態とユーザー情報を取得する
 * @returns 認証済みの場合は{authenticated: true, user: ユーザー情報}、未認証の場合は{authenticated: false}
 */
getAuthStatus: Effect.Effect<
  AuthStatus,
  SessionError | ParseError,
  SessionService | RequestContext
>
```

セッションからユーザー情報を取得し、Schema検証を行った上で認証状態を返す。

#### 3.3.2 認証必須ルートの保護 - `requireAuth`

```typescript
/**
 * 認証が必要なルートに対して認証チェックを行う
 * @param failureRedirect - 未認証時にリダイレクトするURL
 * @returns 認証済みの場合はユーザー情報を返し、未認証の場合はリダイレクトレスポンスを返すEffect
 */
requireAuth: (failureRedirect: string) => 
  Effect.Effect<User, Response, SessionService | RequestContext>
```

認証されていない場合は指定されたURLにリダイレクトし、認証されている場合はユーザー情報を返す。

### 3.4 使用例

#### 3.4.1 ルートローダーでの認証状態取得

```typescript
export const loader = effectLoader(
  Effect.gen(function* () {
    // 認証サービスからAuthStatusを取得
    const { getAuthStatus } = yield* OAuth2Service
    const authStatus = yield* getAuthStatus

    return yield* Effect.succeed(data({ authStatus }))
  }),
)
```

#### 3.4.2 認証必須ルートの保護

```typescript
// 認証が必要なルートのローダー
export const loader = effectLoader(
  pipe(
    // 未認証の場合は/loginにリダイレクト
    requireAuth('/login'),
    // 認証済みの場合はユーザー情報を使って処理を継続
    Effect.flatMap(user => fetchUserData(user.id))
  )
)
```

## ログ出力

### ログの目的

- 問題解決とデバッグ
	- エラーが発生した時に原因特定に必要な情報を残す
	- そのためにリクエスト・レスポンスの内容や処理の流れを追跡できるようにする
- パフォーマンス監視
	- 処理時間の計測
	- リソース使用状況の把握
	- ボトルネックの特定
- セキュリティ監視
	- 不審なアクセスや操作の検知
	- 認証・権限関連の動作記録
- 利用状況の把握
	- アクセス頻度やパターンの分析
	- 機能の利用状況の把握

### ログレベル

- `FATAL`: 人手を使って回復しないといけないサービス停止などの事象が発生したとき
- `ERROR`: サービス停止が発生したが、自動回復できるような場合
- `WARNING`: 正常に処理は行われているが、一部不可解な事象が発生したとき
- `INFO`: 処理が正常に進んでいることを記録する
- `DEBUG`: 開発時に出力

### ログの実装

- 可能な限りEffectのログ出力モジュールをログレベルにあわせて使用すること
	- Effect.logFatal
	- Effect.logError
	- Effect.logWarning
	- Effect.logInfo
	- Effect.logDebug
