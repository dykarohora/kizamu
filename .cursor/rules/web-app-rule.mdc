---
description: 
globs: packages/apps/web-app/**/*.*
alwaysApply: false
---
# Webフロントエンドの実装ルール

## ディレクトリ構成

```
app/
├── root.tsx                # アプリケーションのルートレイアウト
├── routes.ts               # ルート定義
├── entry.client.tsx        # クライアントエントリーポイント
├── entry.server.tsx        # サーバーエントリーポイント
├── routes/                 # ルートコンポーネント
│   ├── Home.tsx            # ホームページ
│   ├── Dashboard.tsx       # ダッシュボードページ
│   └── layouts/            # レイアウトコンポーネント
│       └── MainLayout.tsx  # メインレイアウト（ヘッダーを含む）
├── shared/                 # 共通モジュール全般
│   ├── components/         # 共通コンポーネント
│   │   ├── ui/             # 基本UIコンポーネント（Park UI）
│   │   ├── layout/         # レイアウト関連コンポーネント（Header, Footer等）
│   │   └── features/       # 機能単位のコンポーネント
│   ├── hooks/              # 共通カスタムフック
│   └── utils/              # ユーティリティ関数
├── effect/                 # Effect システム基盤
├── services/               # ドメインサービス
│   ├── api/                # API関連サービス
│   └── auth/               # 認証関連サービス
└── providers/              # アプリケーション全体のプロバイダー
```


## 主要ディレクトリの役割

### app/ ルートファイル
- React Router v7 の規約に従った必須ファイル
- ルート定義とレイアウト構造を提供

### shared/
- 複数のページで再利用可能な共通モジュール
- UI コンポーネント、カスタムフック、ユーティリティ関数を含む
- アプリケーション全体で一貫したデザインと動作を実現

### effect/
- Effect システムの基盤を提供
- React Router v7 の Loader/Action と Effect を統合
- 型安全なデータ取得と更新の仕組みを提供

### services/
- ドメイン別のサービスを実装
- Effect システムを活用した型安全な実装
- API 通信や認証などの機能を担当

### providers/
- アプリケーション全体のプロバイダーを管理
- Effect プロバイダーや認証プロバイダーなどを含む

### pages/
- ページ単位でコンポーネントを整理
- 各ページは独自のコンポーネントとフックを持つ
- 機能別に分割して管理

## 設計原則

### 関心の分離
- UI、ビジネスロジック、データアクセスを明確に分離
- 各モジュールは単一の責任を持つ
- テストと保守が容易な構造を維持

### 型安全性
- Effect システムを活用した型安全な実装
- コンパイル時のエラー検出を最大化
- 実行時エラーを最小化

### 再利用性
- 共通コンポーネントとフックの再利用を促進
- DRY (Don't Repeat Yourself) 原則に従う
- コード重複を最小限に抑える

### スケーラビリティ
- 新機能の追加が容易な構造
- 既存のパターンに従って拡張可能
- 大規模アプリケーションにも対応

### 保守性
- 関連するコードを論理的にグループ化
- 変更の影響範囲を限定
- コードの理解と修正が容易

## React Router v7 と Effect の統合
- React Router v7 のルーティング機能をそのまま活用
- Loader と Action を Effect システムと統合
- Effect の型安全性とエラーハンドリングを React Router v7 に適用

## スタイリング
- Panda CSSを使うこと

## Reactコンポーネントを実装するときの規約
- 関数型コンポーネントとして実装すること
- アロー関数を使って実装すること

## ログ出力

### ログの目的

- 問題解決とデバッグ
	- エラーが発生した時に原因特定に必要な情報を残す
	- そのためにリクエスト・レスポンスの内容や処理の流れを追跡できるようにする
- パフォーマンス監視
	- 処理時間の計測
	- リソース使用状況の把握
	- ボトルネックの特定
- セキュリティ監視
	- 不審なアクセスや操作の検知
	- 認証・権限関連の動作記録
- 利用状況の把握
	- アクセス頻度やパターンの分析
	- 機能の利用状況の把握

### ログレベル

- `FATAL`: 人手を使って回復しないといけないサービス停止などの事象が発生したとき
- `ERROR`: サービス停止が発生したが、自動回復できるような場合
- `WARNING`: 正常に処理は行われているが、一部不可解な事象が発生したとき
- `INFO`: 処理が正常に進んでいることを記録する
- `DEBUG`: 開発時に出力

### ログの実装

- 可能な限りEffectのログ出力モジュールをログレベルにあわせて使用すること
	- Effect.logFatal
	- Effect.logError
	- Effect.logWarning
	- Effect.logInfo
	- Effect.logDebug
